problem statement:
On an infinite plane, a robot initially stands at (0, 0) and faces north.  The robot can receive one of three instructions:

"G": go straight 1 unit;
"L": turn 90 degrees to the left;
"R": turn 90 degress to the right.
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

===========================================================================================================
#include<bits/stdc++.h>
#include<utility>
using namespace std;

class Solution {
public:
    bool isRobotBounded(string instructions) {
        pair<char,pair<int,int>> p;
        p=make_pair('N',make_pair(0,0));
        for(int i=0;i<instructions.size();i++)
        {
            if(instructions[i]=='G')
            {
                if(p.first=='N')
                {
                    p.second.second=p.second.second+1;
                }
               else if(p.first=='W')
                {
                    p.second.first=p.second.first-1;
                }
                else if(p.first=='S')
                {
                    p.second.second=p.second.second-1;
                }
                else if(p.first=='E')
                {
                    p.second.first=p.second.first+1;
                }
            }

            else if(instructions[i]=='L')
            {
                if(p.first=='N')
                    p.first='W';
               else if(p.first=='W')
                    p.first='S';
               else if(p.first=='S')
                    p.first='E';
              else  if(p.first=='E')
                    p.first='N';

            }
            else if(instructions[i]=='R')
            {
                if(p.first=='N')
                    p.first='E';
               else if(p.first=='E')
                    p.first='S';
               else if(p.first=='S')
                    p.first='W';
               else if(p.first=='W')
                    p.first='N';

            }
             cout<<"("<<p.second.first<<","<<p.second.second<<")"<<"->"<<p.first<<endl;
        }
        if(!(p.first=='N')||(p.second.second==0 && p.second.first==0)){

            return true;
        }
        else 
        {
            return false;
        }
    }
};
