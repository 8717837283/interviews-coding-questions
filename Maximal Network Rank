problem statement:

There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates 
that there is a bidirectional road between cities ai and bi.

The network rank of two different cities is defined as the total number of directly connected roads to either city. 
If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.
Given the integer n and the array roads, return the maximal network rank of the entire infrastructure.

Example 1:
Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.

=========================================================================================
code:
void maximum(vector<vector<int>>&vec,vector<int>&vec1)
        
    {
        int max=0,count;
        for(int i=0;i<vec.size();i++)
        {  
            count=0;
            for(int j=0;j<vec.size();j++)           /*count degree of each nodes*/
            {
                if(vec[i][j]==1)
                    count++;
            }
            vec1.push_back(count);
        }           
    }
    
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        
        vector<vector<int>> vec(n , vector<int> (n, 0));
        vector<int>vec1; 
        
        if(roads.size()==0)
            return 0;
        
        for(int i=0;i<roads.size();i++)
        {         
            vec[roads[i][0]][roads[i][1]]=1;
            vec[roads[i][1]][roads[i][0]]=1;
        }
        
        maximum(vec,vec1);
        int nr,cmnr,mnr=0;
        
        for(int i=0;i<n;i++)                /*
        {   cmnr=0;
            for(int j=i+1;j<n;j++)              found two vertax with maximum degree
            {   
                if(vec[i][j]==1)
                    nr=vec1[i]+vec1[j]-1;   // if vertax(i,j) connected to each other
                else
                    nr=vec1[i]+vec1[j];     // if vertax(i,j) not connected to each other
                cmnr=max(cmnr,nr);
                    
            }
            mnr=max(cmnr,mnr);
        }                                     */
    
        return mnr;    
    }
===========================================================================================================
 Solution Description:
 1)count degree of vertax and keep it in vector name vec1.
 2)found two vertax with maximum degree
 complexity O(n^2)
