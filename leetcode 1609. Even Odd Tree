problem statement:

A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

Example 1:
Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.

Example 2:
Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in the level 2 must be in strictly increasing order, so the tree is not Even-Odd.
=====================================================================================================================
code:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isEvenOddTree(TreeNode* root) {
        
        map<int ,vector<int>>mymap;
        
        queue<pair<int,TreeNode*>>que;
        
        que.push(make_pair(0,root));
        
        while(!que.empty())
        {   if(que.front().second->left!=NULL)
                que.push(make_pair(que.front().first+1,que.front().second->left));
            if(que.front().second->right!=NULL)
                que.push(make_pair(que.front().first+1,que.front().second->right));
            if(mymap.count(que.front().first))
            {
                auto it=mymap.find(que.front().first);
                it->second.push_back(que.front().second->val);   
            }
            else
            {
                vector<int>v;
                v.push_back(que.front().second->val);
                mymap[que.front().first]=v;
            }
            que.pop();
            
        }
        int g=0;
        for(auto it=mymap.begin();it!=mymap.end();it++,g++)
        {
            if(g&1==1)
            {   int prn=it->second[0];
                if(prn%2!=0)
                    return false;
                    
                for(int size=1;size<it->second.size();size++)
                {
                    if(it->second[size]<prn&&it->second[size]%2==0)
                        prn=it->second[size];
                    else 
                        return false;
                }
            }
            else
            {   int prn=it->second[0];
                if(prn%2==0)
                    return false;
                    
                for(int size=1;size<it->second.size();size++)
                {
                    if(it->second[size]>prn&&it->second[size]%2!=0)
                        prn=it->second[size];
                    else 
                        return false;
                }
            }
        }
        
        return true;
        
    }
};
============================================================================================
logic:
->to solve this problem i used BFS traversal in which i pushed pair(level,root) in queue. 
->make map, map(level,vecotr) which will contain number of nodes for each level.
->check vector in map level wise and  return true or false according to problem statement.
time complexity O(N+E)
space complexity O(N)


